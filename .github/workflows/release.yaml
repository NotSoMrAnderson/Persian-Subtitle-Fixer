name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            artifact_name: PersianSubtitleFixer-Windows
            executable_ext: .exe
          - os: ubuntu-latest
            artifact_name: PersianSubtitleFixer-Linux
            executable_ext: ""
          - os: macos-latest
            artifact_name: PersianSubtitleFixer-macOS
            executable_ext: .dmg

    env:
      APP_VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install only the minimal dependencies needed
          pip install pyinstaller==5.13.2 chardet PyQt5

      - name: Install UPX (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $upxVersion = "4.2.1"
          $upxZip = "upx-$upxVersion-win64.zip"
          $upxUrl = "https://github.com/upx/upx/releases/download/v$upxVersion/$upxZip"
          Invoke-WebRequest -Uri $upxUrl -OutFile $upxZip
          Expand-Archive -Path $upxZip -DestinationPath .
          echo "$pwd\upx-$upxVersion-win64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: pwsh

      - name: Install UPX (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y upx-ucl
        shell: bash

      - name: Install UPX (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install upx
        shell: bash

      - name: Build with PyInstaller
        run: |
          # Use the --clean flag to ensure a fresh build
          pyinstaller --clean PersianSubtitleFixer.spec

      - name: Clean unnecessary files (All platforms)
        run: |
          # List of directories and file patterns to remove
          if [ "$RUNNER_OS" = "Windows" ]; then
            # Remove unnecessary Qt modules and libraries
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/qml
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/bearer
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/generic
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/geometryloaders
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/imageformats/q{gif,icns,tga,wbmp,webp,pdf,svg,tiff,jp2,mng}.dll
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/mediaservice
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/platforms/q{minimal,offscreen,webgl}.dll
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/playlistformats
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/position
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/printsupport
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/renderplugins
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sceneparsers
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sensorgestures
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sensors
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sqldrivers
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/texttospeech
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/webview
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/translations
          elif [ "$RUNNER_OS" = "Linux" ]; then
            # Remove unnecessary Qt modules and libraries
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/qml
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/bearer
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/generic
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/geometryloaders
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/imageformats/libq{gif,icns,tga,wbmp,webp,pdf,svg,tiff,jp2,mng}.so
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/mediaservice
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/platforms/libq{minimal,offscreen,webgl}.so
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/playlistformats
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/position
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/printsupport
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/renderplugins
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sceneparsers
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sensorgestures
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sensors
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sqldrivers
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/texttospeech
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/webview
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/translations
          elif [ "$RUNNER_OS" = "macOS" ]; then
            # Remove unnecessary Qt modules and libraries
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/qml
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/bearer
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/generic
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/geometryloaders
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/imageformats/libq{gif,icns,tga,wbmp,webp,pdf,svg,tiff,jp2,mng}.dylib
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/mediaservice
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/platforms/libq{minimal,offscreen,webgl}.dylib
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/playlistformats
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/position
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/printsupport
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/renderplugins
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sceneparsers
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sensorgestures
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sensors
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/sqldrivers
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/texttospeech
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/plugins/webview
            rm -rf dist/PersianSubtitleFixer/PyQt5/Qt5/translations
          fi
        shell: bash

      - name: Prepare release package - Windows
        if: matrix.os == 'windows-latest'
        run: |
          # Create a clean directory for release files
          mkdir -p release
          # Copy the executable and necessary files to release directory
          cp -r dist/PersianSubtitleFixer/* release/
          # Rename the main executable
          mv release/PersianSubtitleFixer.exe release/PersianSubtitleFixer-${{ env.APP_VERSION }}.exe
        shell: pwsh

      - name: Prepare release package - Unix
        if: matrix.os != 'windows-latest'
        run: |
          # Create a clean directory for release files
          mkdir -p release
          # Copy all necessary files to maintain proper directory structure
          cp -r dist/PersianSubtitleFixer/* release/
          # Rename the main executable
          mv release/PersianSubtitleFixer release/PersianSubtitleFixer-${{ env.APP_VERSION }}
          # Make executable
          chmod +x release/PersianSubtitleFixer-${{ env.APP_VERSION }}
        shell: bash

      - name: Windows Code Signing (optional)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          # Check if we have valid certificate data
          if [[ -n "$WINDOWS_CERT_BASE64" && "$WINDOWS_CERT_BASE64" != " " && -n "$WINDOWS_CERT_PASSWORD" && "$WINDOWS_CERT_PASSWORD" != " " ]]; then
            echo "Signing executable..."
            certPath="$RUNNER_TEMP/cert.pfx"
            echo "$WINDOWS_CERT_BASE64" | base64 -d > "$certPath"
            "/c/Program Files (x86)/Windows Kits/10/bin/x64/signtool.exe" sign \
              /f "$certPath" \
              /p "$WINDOWS_CERT_PASSWORD" \
              /tr http://timestamp.digicert.com \
              /td sha256 \
              /fd sha256 \
              release/PersianSubtitleFixer-${{ env.APP_VERSION }}.exe
          else
            echo "Skipping code signing - certificate information not provided or empty"
          fi
        env:
          WINDOWS_CERT_BASE64: ${{ secrets.WINDOWS_CERT_BASE64 }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}

      - name: Create release archive - Windows
        if: runner.os == 'Windows'
        run: |
          cd release
          Compress-Archive -Path .\* -DestinationPath ..\PersianSubtitleFixer-Windows-${{ env.APP_VERSION }}.zip
        shell: pwsh
        
      - name: Create release archive - Unix
        if: runner.os != 'Windows'
        run: |
          cd release
          zip -r ../PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip *
        shell: bash

      - name: Generate SHA256 checksum - Windows
        if: runner.os == 'Windows'
        run: |
          $hash = (Get-FileHash -Algorithm SHA256 -Path PersianSubtitleFixer-Windows-${{ env.APP_VERSION }}.zip).Hash.ToLower()
          $hash | Out-File -FilePath PersianSubtitleFixer-Windows-${{ env.APP_VERSION }}.zip.sha256 -Encoding ascii
        shell: pwsh

      - name: Generate SHA256 checksum - Unix
        if: runner.os != 'Windows'
        run: |
          shasum -a 256 PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip | cut -d' ' -f1 > PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip.sha256
        shell: bash

      - name: Upload Release Package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ env.APP_VERSION }}
          path: |
            PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip
            PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip.sha256

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts
        shell: bash

      - name: Prepare release files
        run: |
          mkdir -p release_files
          find artifacts -name "*.zip" -o -name "*.sha256" | xargs -I{} cp {} release_files/
        shell: bash

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_files/*
          generate_release_notes: true
          body: |
            # PersianSubtitleFixer ${{ github.ref_name }}
            
            ## Installation
            - Download the appropriate zip file for your operating system
            - Extract the zip file
            - Run the executable
            
            ## SHA256 Checksums
            Each zip file has a corresponding .sha256 file containing the file's checksum for verification.