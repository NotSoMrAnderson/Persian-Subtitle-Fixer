name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            artifact_name: PersianSubtitleFixer-Windows
            executable_ext: .exe
          - os: ubuntu-latest
            artifact_name: PersianSubtitleFixer-Linux
            executable_ext: ""
          - os: macos-latest
            artifact_name: PersianSubtitleFixer-macOS
            executable_ext: ""

    env:
      APP_VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller chardet PyQt5

      - name: Build with PyInstaller
        run: |
          pyinstaller PersianSubtitleFixer.spec

      - name: Prepare release package - Windows
        if: matrix.os == 'windows-latest'
        run: |
          # Create a clean directory for release files
          mkdir -p release
          # Copy the executable and necessary files to release directory
          cp dist/PersianSubtitleFixer/PersianSubtitleFixer.exe release/PersianSubtitleFixer${{ env.APP_VERSION }}${{ matrix.executable_ext }}
          # Copy any other necessary files
          if (Test-Path "dist/PersianSubtitleFixer/assets") {
            cp -r dist/PersianSubtitleFixer/assets release/
          }
          # Copy any readme or documentation
          if (Test-Path "README.md") {
            cp README.md release/
          }
        shell: pwsh

      - name: Prepare release package - Unix
        if: matrix.os != 'windows-latest'
        run: |
          # Create a clean directory for release files
          mkdir -p release
          # Copy the executable and necessary files to release directory
          cp dist/PersianSubtitleFixer/PersianSubtitleFixer release/PersianSubtitleFixer${{ env.APP_VERSION }}
          # Make executable
          chmod +x release/PersianSubtitleFixer${{ env.APP_VERSION }}
          # Copy any other necessary files
          if [ -d "dist/PersianSubtitleFixer/assets" ]; then
            cp -r dist/PersianSubtitleFixer/assets release/
          fi
          # Copy any readme or documentation
          if [ -f "README.md" ]; then
            cp README.md release/
          fi
        shell: bash

      - name: Windows Code Signing (optional)
        if: matrix.os == 'windows-latest' && env.WINDOWS_CERT_BASE64 != '' && env.WINDOWS_CERT_PASSWORD != ''
        shell: bash
        run: |
          echo "Signing executable..."
          certPath="$RUNNER_TEMP/cert.pfx"
          echo "$WINDOWS_CERT_BASE64" | base64 -d > "$certPath"
          "/c/Program Files (x86)/Windows Kits/10/bin/x64/signtool.exe" sign \
            /f "$certPath" \
            /p "$WINDOWS_CERT_PASSWORD" \
            /tr http://timestamp.digicert.com \
            /td sha256 \
            /fd sha256 \
            release/PersianSubtitleFixer${{ env.APP_VERSION }}${{ matrix.executable_ext }}
        env:
          WINDOWS_CERT_BASE64: ${{ secrets.WINDOWS_CERT_BASE64 }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}

      - name: Create release archive
        run: |
          cd release
          if [ "${{ runner.os }}" == "Windows" ]; then
            powershell Compress-Archive -Path * -DestinationPath ../PersianSubtitleFixer-Windows-${{ env.APP_VERSION }}.zip
          else
            zip -r ../PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip *
          fi
        shell: bash

      - name: Generate SHA256 checksum
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            powershell "(Get-FileHash -Algorithm SHA256 PersianSubtitleFixer-Windows-${{ env.APP_VERSION }}.zip).Hash.ToLower() > PersianSubtitleFixer-Windows-${{ env.APP_VERSION }}.zip.sha256"
          else
            shasum -a 256 PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip | cut -d' ' -f1 > PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip.sha256
          fi
        shell: bash

      - name: Upload Release Package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ env.APP_VERSION }}
          path: |
            PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip
            PersianSubtitleFixer-${{ runner.os }}-${{ env.APP_VERSION }}.zip.sha256

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts
        shell: bash

      - name: Prepare release files
        run: |
          mkdir -p release_files
          find artifacts -name "*.zip" -o -name "*.sha256" | xargs -I{} cp {} release_files/
        shell: bash

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_files/*
          generate_release_notes: true
          body: |
            # PersianSubtitleFixer ${{ github.ref_name }}
            
            ## Installation
            - Download the appropriate zip file for your operating system
            - Extract the zip file
            - Run the executable
            
            ## SHA256 Checksums
            Each zip file has a corresponding .sha256 file containing the file's checksum for verification.